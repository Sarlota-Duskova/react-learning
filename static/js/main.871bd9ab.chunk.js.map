{"version":3,"sources":["components/TeamPlayerInput.js","components/AddPlayerToTeamButtons.js","components/DataRender.js","pages/Home.js","pages/TeamPage.js","App.js","reportWebVitals.js","index.js"],"names":["TeamPlayerInput","props","React","createElement","className","columnTitle","type","placeholder","value","onChange","id","onClick","handleClick","onAdd","buttonText","AddPlayerToTeamButtons","handleClickAdd","onAddPlayerToTeam","handleClickSave","onSave","DataRender","concat","active","onTeamPlayerClick","toggleActive","name","spanTitle","Fragment","subelement","Array","isArray","length","map","item","index","key","handleButtonClick","buttonLists","document","getElementById","click","onShowTeamClick","handleDelete","onDelete","data","accept","event","console","log","onPhotoChange","file","target","files","reader","FileReader","onload","imageUrl","result","readAsDataURL","style","display","Home","defaultTeams","defaultPlayers","image","teams","setTeams","useState","storedTeams","localStorage","getItem","JSON","parse","players","setPlayers","storedPlayers","useEffect","setItem","stringify","newTeamName","setNewTeamName","newPlayerName","setNewPlayerName","selectedTeam","setSelectedTeam","selectedPlayers","setSelectedPlayers","teamError","setTeamError","playerError","setPlayerError","activeTeams","setActiveTeams","fill","activePlayers","setActivePlayers","isTeam","newActiveTeams","isActive","i","newActivePlayers","handlePhotoChange","playerId","updatedPlayers","player","navigate","useNavigate","playerElements","playerToDelete","filter","updatedTeams","team","includes","playerName","handleDeletePlayer","isSelectedIndex","findIndex","selectedPlayer","updatedSelectedPlayers","splice","handlePlayerClick","teamElements","teamToDelete","handleDeleteTeam","handleTeamClick","teamId","state","handleShowTeamClick","e","handleAddTeam","trim","newTeam","handleAddPlayer","newPlayer","reduce","max","handleAddPlayerToTeam","newPlayers","p","some","handleSave","jsonData","TeamPage","useLocation","find","teamPlayers","src","alt","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.871bd9ab.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function TeamPlayerInput(props) {\n\n    const handleClick = () => {\n        props.onAdd();\n    };\n\n    return (\n        <div>\n            <h1 className=\"column-title\">{props.columnTitle}</h1>\n            <div className=\"input-container\">\n            <input\n                type=\"text\"\n                placeholder={props.placeholder}\n                value={props.value}\n                onChange={props.onChange}\n            />\n            <button id=\"btn\" onClick={handleClick}>{props.buttonText}</button>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\n\nexport default function AddPlayerToTeamButtons(props) {\n\n    const handleClickAdd = () => {\n        props.onAddPlayerToTeam();\n    };\n\n    const handleClickSave = () => {\n        props.onSave();\n    };\n\n    return(\n        <div className=\"item-buttons\">\n            <button\n                type=\"button\"\n                id=\"btn\"\n                onClick={handleClickAdd}\n            >Add player to the team\n            </button>\n            <button\n                type=\"button\"\n                id=\"btn-save\"\n                onClick={handleClickSave}\n            >Save\n            </button> \n        </div>\n    )\n}","import React from 'react';\n//import { useNavigate } from 'react-router-dom';\n\nexport default function DataRender(props) {\n\n    const handleClick = () => {\n        props.onTeamPlayerClick();\n    };\n\n    const handleActive = () => {\n        props.toggleActive();\n    };\n\n    const handleDelete = () => {\n        if (props.onDelete) {\n            props.onDelete(props.data); // Pass the data to be deleted to the onDelete function\n        }\n    };\n    \n    const renderPlayersSpan = () => {\n        if (props.spanTitle === \"Players:\" && props.subelement.length === 0) {\n            return null; // If there are no players assigned, don't render anything\n        } else if (props.spanTitle === \"Players:\" && props.subelement.length === 1) {\n            return <span>Player:</span>; // If there is only one player, render \"Player:\"\n        } else if (props.spanTitle === \"Players:\" && props.subelement.length > 1) {\n            return <span>Players:</span>; // If there are multiple players, render \"Players:\"\n        } else {\n            return <span>{props.spanTitle}</span>; // For teams, render the provided spanTitle\n        }\n    };\n    const renderSubelement = () => {\n        if (props.spanTitle === \"Team:\") {\n            return (\n                <>\n                    <span>Team:</span>\n                    <li>{props.subelement}</li>\n                </>\n            );\n        } else {\n            if (Array.isArray(props.subelement)) {\n                return (\n                    <>  \n                        \n                        {renderPlayersSpan()}\n                        {props.subelement.length > 0 && (\n                            <ul>\n                                {props.subelement.map((item, index) => (\n                                    <li key={index}>{item}</li>\n                                ))}\n                            </ul>\n                        )}\n                    </>\n                );\n            } else {\n                return <span>{props.subelement}</span>;\n            }\n        }\n        \n    };\n\n    const handlePhotoChange = (event) => {\n        console.log('onPhotoChange prop:', props.onPhotoChange);\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = () => {\n            const imageUrl = reader.result;\n            props.onPhotoChange(props.id, imageUrl);\n          \n            console.log(\"Updated photo URL:\", imageUrl);\n        };\n\n        if (file) {\n            reader.readAsDataURL(file);\n        }\n    };\n    //const navigate = useNavigate();\n\n    const handleButtonClick = () => {\n        if (props.buttonLists === \"Photo\") {\n            document.getElementById(`photo-upload-${props.id}`).click();\n        } else if (props.buttonLists === \"Show team\") {\n            props.onShowTeamClick(); // Call the function passed as prop\n            \n        }\n    };\n    //handleActive();\n    return(\n        <div className=\"dataLists--list\">\n                <div className={`dataLists--box ${props.active ? 'active' : ''}`} >\n                    <div className=\"dataLists--info\" onClick={() => {\n                            handleClick();\n                            handleActive();\n                        }}>\n                        <strong>{props.name}</strong>\n                            <div className=\"dataListsListed--box\">\n                                {renderSubelement()}\n                            </div>\n                    </div>\n                    <div className=\"dataLists--buttons\">\n                        <button id=\"btn\" onClick={handleButtonClick}>{props.buttonLists}</button>\n                        <button id=\"btn-delete\" onClick={handleDelete}>Delete</button>\n                        <input\n                            id={`photo-upload-${props.id}`}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handlePhotoChange}\n                            style={{ display: \"none\" }} \n                        />\n                    </div>\n                </div>\n               \n        </div>\n    )\n}","/* ------------ Important ------------ */\nimport React from 'react'\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n//import { useHistory } from 'react-router-dom';\n\n\n/* ------------ Components ----------- */\nimport TeamPlayerInput from '../components/TeamPlayerInput';\nimport AddPlayerToTeamButtons from '../components/AddPlayerToTeamButtons';\nimport DataRender from '../components/DataRender';\n\n/* -------------- Data --------------- */\n//import dataPlayers from '../data/dataPlayers';\n//import dataTeams from '../data/dataTeams';\n\n/* -------------- Pages -------------- */\n//import TeamPage from './pages/TeamPage';\n\nexport default function Home() {\n    \n\n\n    //const [teams, setTeams] = useState([\n    const defaultTeams = [\n        { \n          id: 0,\n          name: \"Slavie Praha\",\n          subelement: [\"Player 3\"]\n        },\n        { \n          id: 1,\n          name: \"Votroci\",\n          subelement: [\"Player 1\", \"Player 2\"]\n        },\n        { \n          id: 2,\n          name: \"Sparta\",\n          subelement: []\n        }\n      ];\n  \n      //const [players, setPlayers] = useState([\n    const defaultPlayers = [\n        { \n          id: 0,\n          name: \"Player 1\",\n          subelement: \"Votroci\",\n          image: \"https://cdn-icons-png.flaticon.com/512/146/146031.png\"\n        },\n        { \n          id: 1,\n          name: \"Player 2\",\n          subelement: \"Votroci\",\n          image: \"https://cdn-icons-png.flaticon.com/512/146/146031.png\"\n        },\n        { \n          id: 2,\n          name: \"Player 3\",\n          subelement: \"Slavie Praha\",\n          image: \"https://cdn-icons-png.flaticon.com/512/146/146031.png\"\n        },\n        { \n          id: 3,\n          name: \"Player 4\",\n          subelement: \"Unassigned\",\n          image: \"https://cdn-icons-png.flaticon.com/512/146/146031.png\"\n        },\n        { \n          id: 4,\n          name: \"Player 5\",\n          subelement: \"Unassigned\",\n          image: \"https://cdn-icons-png.flaticon.com/512/146/146031.png\"\n        }\n      ];\n    // Load teams and players data from localStorage, or use default values if not available\n    const [teams, setTeams] = useState(() => {\n        const storedTeams = localStorage.getItem('teams');\n        return storedTeams ? JSON.parse(storedTeams) : defaultTeams;\n    });\n\n    const [players, setPlayers] = useState(() => {\n        const storedPlayers = localStorage.getItem('players');\n        return storedPlayers ? JSON.parse(storedPlayers) : defaultPlayers;\n    });\n\n    useEffect(() => {\n        // Save teams and players data to localStorage whenever they change\n        localStorage.setItem('teams', JSON.stringify(teams));\n        localStorage.setItem('players', JSON.stringify(players));\n    }, [teams, players]);\n  \n    const [newTeamName, setNewTeamName] = useState('');\n    const [newPlayerName, setNewPlayerName] = useState('');\n  \n    const handleAddTeam = () => {\n      if (newTeamName.trim() !== '') {\n        const newTeam = { id: teams.length, name: newTeamName, subelement: []};\n\n        setTeams([...teams, newTeam]);\n        setActiveTeams([...activeTeams, false]);\n        setNewTeamName('');\n      }\n    };\n  \n    const handleAddPlayer = () => {\n      if (newPlayerName.trim() !== '') {\n        // Find the maximum ID currently in use\n        const maxId = players.reduce((max, player) => (player.id > max ? player.id : max), 0);\n        // Generate a new unique ID by incrementing the maximum ID\n        const newId = maxId + 1;\n        const newPlayer = { id: newId, name: newPlayerName, subelement: \"Unassigned\", image:\"https://cdn-icons-png.flaticon.com/512/146/146031.png\" };\n\n        setPlayers([...players, newPlayer]);\n        setActivePlayers([...activePlayers, false]);\n        setNewPlayerName('');\n      }\n    };\n\n    const [selectedTeam, setSelectedTeam] = useState(null); //null\n    const [selectedPlayers, setSelectedPlayers] = useState([]);\n    const [teamError, setTeamError] = useState(false);\n    const [playerError, setPlayerError] = useState(false);\n\n    const handleTeamClick = (team) => {\n        /*\n        setSelectedTeam(team);\n        console.log(\"Selected Team:\", team.title);\n        setTeamError(false);\n        */\n        if (team === selectedTeam) {\n        setSelectedTeam(null);\n        \n        } else {\n        setSelectedTeam(team);\n        console.log(\"Selected Team:\", team.name);\n        setTeamError(false);\n        }\n    };\n\n    const handlePlayerClick = (player) => {\n        // Check if the player is already selected\n        const isSelectedIndex = selectedPlayers.findIndex(selectedPlayer => {\n        console.log(\"Checking selected player:\", selectedPlayer.id);\n        console.log(\"Clicked player ID:\", player.id);\n        return selectedPlayer.id === player.id;\n        });\n    \n        console.log(\"isSelectedIndex:\", isSelectedIndex);\n        \n        if (isSelectedIndex !== -1) {\n        // If the player is already selected, remove it from the selectedPlayers array\n        const updatedSelectedPlayers = [...selectedPlayers];\n        updatedSelectedPlayers.splice(isSelectedIndex, 1);\n        setSelectedPlayers(updatedSelectedPlayers);\n        console.log(\"Deselected Player:\", player);\n        console.log(\"Updated Selected Players:\", updatedSelectedPlayers);\n        } else {\n        // If the player is not selected, add it to the selectedPlayers array\n        setSelectedPlayers([...selectedPlayers, player]);\n        console.log(\"Selected Players:\", [...selectedPlayers, player]);\n        }\n        setPlayerError(false);\n    };\n\n    const [activeTeams, setActiveTeams] = useState(Array(teams.length).fill(false)); // Initialize activeTeams state\n    const [activePlayers, setActivePlayers] = useState(Array(players.length).fill(false)); // Initialize activeTeams state\n\n    const handleAddPlayerToTeam = () => {\n        if (!selectedTeam) {\n        setTeamError(true);\n        return;\n        }\n\n        if (selectedPlayers.length === 0) {\n        setPlayerError(true);\n        return;\n        }\n\n        // Update team's players\n        //if (selectedTeam && selectedPlayers.length > 0) {\n        const updatedTeams = teams.map(team => {\n            if (team.id === selectedTeam.id) {\n                const newPlayers = selectedPlayers.map(player => player.name);\n                console.log(`Adding players ${newPlayers} to team ${team.name}`);\n                return {\n                ...team,\n                subelement: [...team.subelement, ...newPlayers]\n                };  \n            } else {\n                // Remove the selected players from other teams\n                return {\n                    ...team,\n                    subelement: team.subelement.filter(player => !selectedPlayers.map(p => p.name).includes(player))\n                };\n            }\n        });\n\n        setTeams(updatedTeams);\n\n        // Update players' team\n        const updatedPlayers = players.map(player => {\n            if (selectedPlayers.some(selectedPlayer => selectedPlayer.id === player.id)) {\n                return {\n                ...player,\n                subelement: selectedTeam.name\n                };\n            }\n            return player;\n        }); \n\n        setPlayers(updatedPlayers);\n\n        // Clear selections after adding players to the team\n        setSelectedTeam(null);\n        setSelectedPlayers([]);\n        // Reset active state of teams\n        setActiveTeams(Array(teams.length).fill(false));\n        setActivePlayers(Array(players.length).fill(false));\n        //}\n    };\n\n    const handleSave = () => {\n        // Create an object containing teams and players data\n        const data = {\n            teams: teams,\n            players: players\n        };\n\n        // Convert the data object to a JSON string\n        const jsonData = JSON.stringify(data, null, 2);\n\n        // Log the JSON data in the console\n        console.log(jsonData);\n    };\n\n\n    const handleDeleteTeam = (teamToDelete) => {\n        console.log(\"Deleting Team with ID:\", teamToDelete.id);\n        const updatedTeams = teams.filter(team => team.id !== teamToDelete.id);\n        setTeams(updatedTeams);\n\n        // Update players who were associated with the deleted team\n        const updatedPlayers = players.map (player => {\n            if (player.subelement === teamToDelete.name) {\n                return {\n                    ...player,\n                    subelement: \"Unassigned\"\n                };\n            }\n            return player;\n        });\n        setPlayers(updatedPlayers);\n\n        console.log(\"Deleting Team:\", teamToDelete);\n    };\n\n    const handleDeletePlayer = (playerToDelete) => {\n        console.log(\"Deleting Player with ID:\", playerToDelete.id);\n        const updatedPlayers = players.filter(player => player.id !== playerToDelete.id);\n        setPlayers(updatedPlayers);\n\n        // If the deleted player was assigned to a team, update the list of players for that team\n        const updatedTeams = teams.map(team => {\n            if (team.subelement.includes(playerToDelete.name)) {\n                return {\n                    ...team,\n                    subelement: team.subelement.filter(playerName => playerName !== playerToDelete.name)\n                };\n            }\n            return team;\n        });\n        setTeams(updatedTeams);\n\n        console.log(\"Deleting Player:\", playerToDelete);\n    };\n    /*\n    const toggleActivePlayers = (index) => {\n        setActivePlayers(prevActivePlayers => {\n            const newActivePlayers = [...prevActivePlayers];\n            newActivePlayers[index] = !newActivePlayers[index];\n            console.log(\"New Active Players:\", newActivePlayers);\n            return newActivePlayers;\n        });\n    };\n    \n    const toggleActiveTeam = (index) => {\n        setActiveTeams(prevActiveTeams => {\n            const newActiveTeams = [...prevActiveTeams];\n            newActiveTeams[index] = !newActiveTeams[index];\n            console.log(\"New Active Teams:\", newActiveTeams);\n            return newActiveTeams;\n        });\n    };\n    */\n\n    const toggleActive = (index, isTeam) => {\n        if (isTeam) {\n            const newActiveTeams = activeTeams.map((isActive, i) => (i === index ? !isActive : false));\n            console.log(\"New Active Teams:\", newActiveTeams);\n            setActiveTeams(newActiveTeams);\n        } else {\n            const newActivePlayers = activePlayers.map((isActive, i) => (i === index ? !isActive : isActive));\n            console.log(\"New Active Players:\", newActivePlayers);\n            setActivePlayers(newActivePlayers);\n        }\n    };\n\n\n    const handlePhotoChange = (playerId, imageUrl) => {\n        const updatedPlayers = players.map(player => {\n            if (player.id === playerId) {\n                return { ...player, image: imageUrl };\n            }\n            return player;\n        });\n        setPlayers(updatedPlayers);\n    };\n\n    const navigate = useNavigate();\n\n    //const history = useHistory();\n\n    const handleShowTeamClick = (teamId) => {\n        navigate(`/team/${teamId}`, { state: { teams, players, teamId } });\n    };\n\n\n    const playerElements = players.map((player, index) => (\n        <DataRender\n            key={player.id}\n            name={player.name}\n            subelement={player.subelement}\n            spanTitle=\"Team:\"\n            buttonLists=\"Photo\"\n            onDelete={() => handleDeletePlayer(player)}\n            onTeamPlayerClick={() => handlePlayerClick(player)}\n            //toggleActive={() => toggleActivePlayers(index)}\n            toggleActive={() => toggleActive(index, false)}\n            active={activePlayers[index]}\n            image={player.image}\n            onPhotoChange={handlePhotoChange}\n        />\n    ));\n\n    const teamElements = teams.map((team, index) => (\n        <DataRender\n            key={team.id}\n            name={team.name}\n            subelement={team.subelement}\n            spanTitle=\"Players:\"\n            buttonLists=\"Show team\"\n            onDelete={() => handleDeleteTeam(team)}\n            onTeamPlayerClick={() => handleTeamClick(team)}\n            //toggleActive={() => toggleActiveTeam(index)}\n            toggleActive={() => toggleActive(index, true)}\n            active={activeTeams[index]}\n            onShowTeamClick={() => handleShowTeamClick(index)}\n        />\n    ));\n\n    return (\n        <div className=\"app\">\n            <div className=\"column\">\n                <TeamPlayerInput\n                    columnTitle=\"Teams\"\n                    placeholder=\"Enter team name\"\n                    buttonText=\"Add Team\"\n                    value={newTeamName}\n                    onChange={(e) => setNewTeamName(e.target.value)}\n                    onAdd={handleAddTeam}\n                />\n                \n                {teamElements}\n                {teamError && <div className=\"error-message\">Please select a team.</div>}\n            </div>\n            <div className=\"column\">\n                <TeamPlayerInput\n                    columnTitle=\"Players\"\n                    placeholder=\"Enter player name\"\n                    buttonText=\"Add Player\"\n                    value={newPlayerName}\n                    onChange={(e) => setNewPlayerName(e.target.value)}\n                    onAdd={handleAddPlayer}\n                />\n                {playerElements}\n                {playerError && <div className=\"error-message\">Please select at least one player.</div>}\n                <AddPlayerToTeamButtons\n                    onAddPlayerToTeam={handleAddPlayerToTeam}\n                    onSave={handleSave}\n                />\n            </div>  \n        </div>  \n    );\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nexport default function TeamPage(props){\n  //const { teamId } = useParams();\n  const {state} = useLocation();\n  const { teams, players, teamId } = state;\n\n  // Find the specific team based on teamId\n  const team = teams.find(team => team.id === teamId);\n  console.log(teamId)\n  const teamPlayers = players.filter(player => team.subelement.includes(player.name));\n\n  return (\n    <div>\n      <h1>{team.name}</h1>\n      {teamPlayers.length > 0 ? (\n        <div>\n          <h2>{teamPlayers.length === 1 ? 'Player' : 'Players'}:</h2>\n          <ul>\n            {teamPlayers.map(player => (\n              <li key={player.id}>\n                <div>{player.name}</div>\n                <img src={player.image} alt={player.name} />\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <p>This team does not have assigned players yet.</p>\n    )}\n    </div>\n  )\n}","/* ------------ Important ------------ */\nimport React from 'react'\n//import { useState } from 'react';\n\nimport { BrowserRouter as Router, Routes, Route, BrowserRouter } from 'react-router-dom';\n\n/* -------------- Pages -------------- */\nimport Home from './pages/Home';\nimport TeamPage from './pages/TeamPage';\n\n/* ----------- CSS Styling ----------- */\nimport './App.css';\n\n/* ------------ Components ----------- */\n\nexport default function App() {\n\n  return (\n    <div>\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/team/:id\" element={<TeamPage />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}